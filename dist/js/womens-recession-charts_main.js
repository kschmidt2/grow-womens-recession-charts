function drawHighcharts2(){Highcharts.chart("chart-container-1",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1Wf4Wwp5a0zC90jF1LiQBLDUhTgHVxFZMaWUVSz3QALc",googleSpreadsheetWorksheet:1},plotOptions:{series:{pointStart:0,groupPadding:.1,dataLabels:{enabled:!0,format:"{y}%",verticalAlign:"bottom"},states:{hover:{enabled:!1}}}},legend:{enabled:!1},xAxis:{labels:{autoRotation:!1,style:{whiteSpace:"nowrap"}},tickLength:5,type:"category",offset:-91},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},max:3,min:-2,visible:!1},credits:{enabled:!1},tooltip:{enabled:!1},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},xAxis:{labels:{step:2}},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-2",{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1Wf4Wwp5a0zC90jF1LiQBLDUhTgHVxFZMaWUVSz3QALc",googleSpreadsheetWorksheet:2},plotOptions:{series:{lineWidth:1,marker:{enabled:!1,symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-3",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1Wf4Wwp5a0zC90jF1LiQBLDUhTgHVxFZMaWUVSz3QALc",googleSpreadsheetWorksheet:3},plotOptions:{series:{groupPadding:.1}},legend:{align:"left",symbolRadius:0,verticalAlign:"top",x:50,y:5,floating:!0},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},max:2e6,min:-4e6,tickAmount:7},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-4",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1Wf4Wwp5a0zC90jF1LiQBLDUhTgHVxFZMaWUVSz3QALc",googleSpreadsheetWorksheet:4},plotOptions:{series:{groupPadding:.05,stacking:"percent"}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,layout:"vertical"},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0,valueSuffix:"%"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-8,layout:"horizontal"},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-5",{chart:{type:"bar",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1Wf4Wwp5a0zC90jF1LiQBLDUhTgHVxFZMaWUVSz3QALc",googleSpreadsheetWorksheet:5},plotOptions:{series:{groupPadding:.1}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,itemMarginTop:-10},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10,spacingLeft:10},plotOptions:{series:{groupPadding:.2,dataLabels:{enabled:!0,allowOverlap:!0,format:"{y}%"}}},xAxis:{labels:{align:"left",reserveSpace:!1,x:5,y:-27}},yAxis:{visible:!1},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}})}Highcharts.setOptions({lang:{thousandsSep:","}}),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts2():document.addEventListener("DOMContentLoaded",drawHighcharts2);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
